# -*- mode: snippet; require-final-newline: nil -*-
# name: prime_gen
# key: prime_gen
# binding: direct-keybinding
# --
import itertools

def prime_gen():
    yield 2
    comp_dict = {}
    for num in itertools.islice(itertools.count(3),0,None,2):
        p = comp_dict.pop(num,None)
        if p is not None:
            test = num + 2*p
            while test in comp_dict:
                test = test + 2*p
            comp_dict[test] = p
        else:
            comp_dict[num*num] = num
            yield num


def prime_wheel_fact_gen():
    yield 2
    yield 3
    yield 5
    wheel_mask = [0 if x%3 == 0 or x%5 == 0 else 1 for x in range(7,37,2)]
    modulos = frozenset([x%30 for x in range(31,61,2)
                              if x%3 != 0 and x%5 != 0])
    comp_dict = {}
    for num in itertools.compress(itertools.islice(itertools.count(7),0,None,2),
                        itertools.cycle(wheel_mask)):
        p = comp_dict.pop(num,None)
        if p is not None:
            test = num + 2*p
            while test in comp_dict or test%30 not in modulos:
                test = test + 2*p
            comp_dict[test] = p
        else:
            comp_dict[num*num] = num
            yield num


def primes(num):
    mypgen = prime_gen()
    result = []
    while True:
        p = next(mypgen)
        if p > num:
            break
        else:
            result.append(p)
    mypgen.close()
    return result


def primes_wheel_fact(num):
    mypgen = prime_wheel_fact_gen()
    result = []
    while True:
        p = next(mypgen)
        if p > num:
            break
        else:
            result.append(p)
    mypgen.close()
    return result


def is_prime(num):
    result = True
    if num < 4:
        if (num != 2 and num != 3):
            result = False
    else:
        nsqrt = int(num**0.5) + 1
        mygen = prime_gen()
        for p in mygen:
            if p > nsqrt:
                break
            if num%p == 0:
                result = False
                break
        mygen.close()
    return result
